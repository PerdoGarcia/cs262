# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import message_server_pb2 as message__server__pb2

GRPC_GENERATED_VERSION = '1.70.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in message_server_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class MessageServerStub(object):
    """The greeting service definition.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateAccount = channel.unary_unary(
                '/MessageServer/CreateAccount',
                request_serializer=message__server__pb2.CreateRequest.SerializeToString,
                response_deserializer=message__server__pb2.CreateReply.FromString,
                _registered_method=True)
        self.LoginAccount = channel.unary_unary(
                '/MessageServer/LoginAccount',
                request_serializer=message__server__pb2.LoginRequest.SerializeToString,
                response_deserializer=message__server__pb2.LoginReply.FromString,
                _registered_method=True)
        self.LogoutAccount = channel.unary_unary(
                '/MessageServer/LogoutAccount',
                request_serializer=message__server__pb2.LogoutRequest.SerializeToString,
                response_deserializer=message__server__pb2.LogoutReply.FromString,
                _registered_method=True)
        self.ListAccounts = channel.unary_unary(
                '/MessageServer/ListAccounts',
                request_serializer=message__server__pb2.ListAccountsRequest.SerializeToString,
                response_deserializer=message__server__pb2.ListAccountsReply.FromString,
                _registered_method=True)
        self.SendMessage = channel.unary_unary(
                '/MessageServer/SendMessage',
                request_serializer=message__server__pb2.SendMessageRequest.SerializeToString,
                response_deserializer=message__server__pb2.SendMessageReplyToSender.FromString,
                _registered_method=True)
        self.ReadMessages = channel.unary_unary(
                '/MessageServer/ReadMessages',
                request_serializer=message__server__pb2.ReadMessagesRequest.SerializeToString,
                response_deserializer=message__server__pb2.ReadMessagesReply.FromString,
                _registered_method=True)
        self.DeleteMessages = channel.unary_unary(
                '/MessageServer/DeleteMessages',
                request_serializer=message__server__pb2.DeleteMessagesRequest.SerializeToString,
                response_deserializer=message__server__pb2.DeleteMessagesReply.FromString,
                _registered_method=True)
        self.DeleteAccount = channel.unary_unary(
                '/MessageServer/DeleteAccount',
                request_serializer=message__server__pb2.DeleteAccountRequest.SerializeToString,
                response_deserializer=message__server__pb2.DeleteAccountReply.FromString,
                _registered_method=True)


class MessageServerServicer(object):
    """The greeting service definition.
    """

    def CreateAccount(self, request, context):
        """Attempts to create a new account
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def LoginAccount(self, request, context):
        """Attempts to login the user
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def LogoutAccount(self, request, context):
        """Attempts to logout the user
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListAccounts(self, request, context):
        """Attempts to list all accounts
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SendMessage(self, request, context):
        """Attempts to send a message from one user to another
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReadMessages(self, request, context):
        """Attempts to read a number of messages for one user
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteMessages(self, request, context):
        """Attempts to delete a message from a user
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteAccount(self, request, context):
        """Attempts to delete an account
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MessageServerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateAccount': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateAccount,
                    request_deserializer=message__server__pb2.CreateRequest.FromString,
                    response_serializer=message__server__pb2.CreateReply.SerializeToString,
            ),
            'LoginAccount': grpc.unary_unary_rpc_method_handler(
                    servicer.LoginAccount,
                    request_deserializer=message__server__pb2.LoginRequest.FromString,
                    response_serializer=message__server__pb2.LoginReply.SerializeToString,
            ),
            'LogoutAccount': grpc.unary_unary_rpc_method_handler(
                    servicer.LogoutAccount,
                    request_deserializer=message__server__pb2.LogoutRequest.FromString,
                    response_serializer=message__server__pb2.LogoutReply.SerializeToString,
            ),
            'ListAccounts': grpc.unary_unary_rpc_method_handler(
                    servicer.ListAccounts,
                    request_deserializer=message__server__pb2.ListAccountsRequest.FromString,
                    response_serializer=message__server__pb2.ListAccountsReply.SerializeToString,
            ),
            'SendMessage': grpc.unary_unary_rpc_method_handler(
                    servicer.SendMessage,
                    request_deserializer=message__server__pb2.SendMessageRequest.FromString,
                    response_serializer=message__server__pb2.SendMessageReplyToSender.SerializeToString,
            ),
            'ReadMessages': grpc.unary_unary_rpc_method_handler(
                    servicer.ReadMessages,
                    request_deserializer=message__server__pb2.ReadMessagesRequest.FromString,
                    response_serializer=message__server__pb2.ReadMessagesReply.SerializeToString,
            ),
            'DeleteMessages': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteMessages,
                    request_deserializer=message__server__pb2.DeleteMessagesRequest.FromString,
                    response_serializer=message__server__pb2.DeleteMessagesReply.SerializeToString,
            ),
            'DeleteAccount': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteAccount,
                    request_deserializer=message__server__pb2.DeleteAccountRequest.FromString,
                    response_serializer=message__server__pb2.DeleteAccountReply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'MessageServer', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('MessageServer', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class MessageServer(object):
    """The greeting service definition.
    """

    @staticmethod
    def CreateAccount(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/MessageServer/CreateAccount',
            message__server__pb2.CreateRequest.SerializeToString,
            message__server__pb2.CreateReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def LoginAccount(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/MessageServer/LoginAccount',
            message__server__pb2.LoginRequest.SerializeToString,
            message__server__pb2.LoginReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def LogoutAccount(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/MessageServer/LogoutAccount',
            message__server__pb2.LogoutRequest.SerializeToString,
            message__server__pb2.LogoutReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListAccounts(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/MessageServer/ListAccounts',
            message__server__pb2.ListAccountsRequest.SerializeToString,
            message__server__pb2.ListAccountsReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SendMessage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/MessageServer/SendMessage',
            message__server__pb2.SendMessageRequest.SerializeToString,
            message__server__pb2.SendMessageReplyToSender.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ReadMessages(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/MessageServer/ReadMessages',
            message__server__pb2.ReadMessagesRequest.SerializeToString,
            message__server__pb2.ReadMessagesReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteMessages(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/MessageServer/DeleteMessages',
            message__server__pb2.DeleteMessagesRequest.SerializeToString,
            message__server__pb2.DeleteMessagesReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteAccount(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/MessageServer/DeleteAccount',
            message__server__pb2.DeleteAccountRequest.SerializeToString,
            message__server__pb2.DeleteAccountReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
